v2.0
- Move all json objects to namespace format::json. E.g format::json::number (new feature).
- Store integer type numeric value in long long (enhancement).
- Make casting json object to primitive value more accurate.
    Value is only casted to primitive if it is actually possible by static_cast<T>.
    Otherwise json_conversion_error is thrown. This also fixes numeric value bug for string type object.
    See: https://github.com/karekoho/json/issues/2
    (enhancement & bugfix)

TODO:
- Store numeric value in union { double, long long }
    json_number.cpp:15:20: warning: implicit conversion from 'long long' to 'double' may lose precision

- Template specialization for number. E.g. json::number<unsigned int> (100)

- Make leaf objects immutable
    - remove possiblity to assing new value for string|number|boolean
    - remove any internal states
    - always generate stringified value on the fly. Do not hold string length.
    - remove lazy calculation of number primitive value

- Add const json::json[key|index], const iterator
    See: https://stackoverflow.com/questions/9685486/unordered-map-thread-safety

- Remove value::clone
- Remove value::parent

- Use google test

- Leaf objects could be internal classes of json::value.
    It would be possible to get rid of
    - many friend declarations,
    - call wrappers --> inline void __call__do_something ()
    - value::parent ()


###

Semantic Versioning https://semver.org/

Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards compatible manner, and
PATCH version when you make backwards compatible bug fixes.
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.


