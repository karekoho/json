PUBLIC INTERFACE:

value = 0:
value & = value[key]
value & = value[index]
const wchar_t * = value.get ()
const wchar_t * = value.stringify ()

value = value &                         // assignment
value = value *                         // assignment
value = double                          // assignment
value = const wchar_t *json_input       // assignment
value = boolean                         // assignment
value = nullptr                         // assignment
value = undefined                       // deletion

json > value:
json (const wchar_t *json_input)
json (object *)
json (array *)
json (const object &)                   // copy
json (const array &)                    // copy
json (const json &)                     // copy

json = const wchar_t *json_input        // assignment
json = const object &                   // assignment
json = array *                          // assignment

object > json:
object (const wchar_t *json_input)
object (const object &)                 // copy
object {{std::wstring, value *},{std::wstring, value *}}

array > json:
array (const wchar_t *json_input)
array (const object &)                  // copy
array {value*, value*...}

array = const array &                   // copy

number > leaf > value:
number (double)
number (float)

number (const number &)
number = double                 // assignment
number = float                  // assignment
number = const number &         // copy

string > leaf:
string (const wchar_t *)
string (const number &)         // copy

string  = const wchar_t *       // assignment
string  = const string &        // copy

boolean > leaf:
boolean (bool)
boolean (const boolean &)       // copy

boolean = bool                  // assignment
boolean = const boolean &       // copy

null > leaf:
null

undefined > leaf:
undefined
